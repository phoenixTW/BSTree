								v1.0

- Tree node should contain a data field, a left and a right. 
- Left and Right should be node pointer.
- There should be a root node which will be start for the tree.
- A tree DS should contain Node pointer root and count of the node

								
								v0.1
BSTree createBSTree(void);
	- It should create a tree object where root should be initialize bhy null and count should be zero;

Node_ptr createTreeNode (int);
	- A memory should create on the heap.
	- The value should be insert to the data field
	- The left value and the right value will set to be null


							v0.2

int insert(BSTree *, int);
	- It should return the count of the number of node in the tree.
	- insert method should take the address of the tree and the value where it will going to insert.
	- before the data should be malloc and later on it will be insert as int value.
	- The data will look after for the element's value in the tree, if its greater than the element's value then go to the right child else go to the left child, the process will continue until it will find a null value and insert on that position.


							v0.3

Node_ptr find(BSTree, int);
	- It should return reference of matched node
	- find function will call recursively.
	- It will check the value is greater than or less than the value. If it is greater than then go to right tree and if not then go to the left tree.
	- If the data is missing on the tree then return null.
